[package]
name = "parsm"
version = "0.8.3"
edition = "2024"
authors = ["John Cairns <john@2ad.com>"]
description = "Multi-format data processor that understands structured text better than sed or awk. Supports JSON, CSV, YAML, TOML, logfmt, and plain text with powerful filtering and templating."
license = "MIT"
repository = "https://github.com/jac18281828/parsm"
documentation = "https://docs.rs/parsm"
readme = "README.md"
keywords = ["parser", "filter", "json", "yaml", "toml"]
categories = ["command-line-utilities", "parsing", "text-processing"]

[dependencies]
serde_json = "1.0"
serde = { version = "1.0", features = ["derive"] }
csv = "1.1"
toml = "0.8.22"
serde_yaml = "0.9.33"
pest = "2.8.1"
pest_derive = "2.8.1"
clap = "4.5.42"
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
regex = "1.10"

[dev-dependencies]
tempfile = "3.0"

[[bin]]
name = "parsm" 
path = "src/bin/parsm.rs"


# Example usage in your lib.rs 
# 
# Basic usage:
# ```
# // Filter JSON
# echo '{"name": "Alice", "age": 30}' | parsm 'name == "Alice"'
# 
# // Filter and template (combined syntax)
# echo '{"name": "Alice", "age": 30}' | parsm 'age > 25 [${name} is ${age} years old]'
# 
# // Filter and template (separate arguments)
# echo '{"name": "Alice", "age": 30}' | parsm 'age > 25' '[${name} is ${age} years old]'
# 
# // Field selection
# echo '{"name": "Alice", "age": 30}' | parsm 'name'
# 
# // Filter CSV (auto-converts to indexed fields)
# echo 'Alice,30,Engineer' | parsm 'field_1 > "25" [${field_0}: ${field_2}]'
# 
# // Filter logfmt
# echo 'level=error msg="timeout" service=api' | parsm 'level == "error" [${level} ${msg}]'
# 
# // Simple template variables
# echo '{"name": "Alice", "age": 30}' | parsm '[$name is $age years old]'
# 
# // String operations
# echo '{"name": "Alice"}' | parsm 'name *= "lic"'    // contains
# echo '{"name": "Alice"}' | parsm 'name ^= "Al"'     // starts with  
# echo '{"name": "Alice"}' | parsm 'name $= "ice"'    // ends with
# echo '{"name": "Alice"}' | parsm 'name ~= "A.*e"'   // regex match
# 
# // Complex filters
# parsm 'name == "Alice" && age > 25 [${name}: active]'
# ```
#
# Advanced features:
# - Auto-detects JSON, CSV, YAML, TOML, logfmt, and plain text
# - Supports nested field access (user.email)
# - Rich comparison operators (==, !=, <, >, *=, ^=, $=, ~=)
# - Boolean logic (&&, ||, !) with explicit comparisons
# - Template-based output formatting with ${variable} syntax
# - Streaming processing for large datasets
