// Pest grammar for parsm DSL parsing

// Remove silent whitespace - let spaces pass through
WS = _{ " " | "\t" | "\n" | "\r" }

program = { SOI ~ expression? ~ EOI }

expression = {
    combined_expr |
    template_expr |
    filter_expr |
    field_selector
}

combined_expr = { filter_expr ~ WS* ~ template_expr }

field_selector = { quoted_field | bare_field }
quoted_field = { string_literal }
bare_field = { field_path }

filter_expr = { boolean_expr }

boolean_expr = { or_expr }
or_expr = { and_expr ~ (WS* ~ or_op ~ WS* ~ and_expr)* }
and_expr = { not_expr ~ (WS* ~ and_op ~ WS* ~ not_expr)* }
not_expr = { 
    not_op ~ WS* ~ not_expr | 
    comparison_expr 
}

comparison_expr = {
    "(" ~ WS* ~ boolean_expr ~ WS* ~ ")" |
    field_truthy |
    field_path ~ WS* ~ comparison_op ~ WS* ~ value
}

field_truthy = { field_path ~ "?" }



or_op = { "||" }
and_op = { "&&" }
not_op = { "!" }
comparison_op = { 
    "==" | "!=" | "<=" | ">=" | "<" | ">" | 
    "~=" | "^=" | "$=" | "*="
}

field_path = { field_component ~ ("." ~ field_component)* }
field_component = { identifier | numeric_identifier }
identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
numeric_identifier = @{ ASCII_DIGIT+ }

value = {
    string_literal |
    regex_literal |
    number |
    boolean |
    null |
    field_path
}


regex_literal = { "/" ~ regex_content ~ "/" ~ regex_flags? }
regex_content = @{ (!"/" ~ ANY)* }
regex_flags = @{ ("i" | "m" | "s" | "x")+ }

string_literal = { "\"" ~ string_content ~ "\"" | "'" ~ string_content_single ~ "'" }
string_content = @{ (!("\"") ~ ANY)* }
string_content_single = @{ (!("'") ~ ANY)* }

number = @{ "-"? ~ (float | integer) }
float = @{ integer ~ "." ~ ASCII_DIGIT+ }
integer = @{ ASCII_DIGIT+ }

boolean = { "true" | "false" }
null = { "null" }

template_expr = {
    braced_template |
    bracketed_template |
    template_conditional |
    simple_variable
}

braced_template = { "{" ~ braced_template_content ~ "}" }
bracketed_template = { "[" ~ bracketed_template_content ~ "]" }

braced_template_content = { 
    interpolated_content |
    braced_template_item* 
}

braced_template_item = {
    template_variable |
    braced_template_literal
}

bracketed_template_content = { 
    interpolated_content |
    bracketed_template_item* 
}

bracketed_template_item = {
    template_variable |
    bracketed_template_literal
}

// Interpolated content can exist within braces or brackets
interpolated_content = { 
    (interpolated_literal ~ template_variable ~ interpolated_item*) |
    (template_variable ~ interpolated_item+)
}

braced_template_literal = @{ 
    (!(template_variable | "}") ~ ANY)+
}

bracketed_template_literal = @{ 
    (!(template_variable | "]") ~ ANY)+
}

interpolated_text = { 
    (interpolated_literal ~ template_variable ~ interpolated_item*) |
    (template_variable ~ interpolated_item+)
}

interpolated_item = {
    template_variable |
    safe_interpolated_literal
}

safe_interpolated_literal = @{ 
    (!(("$" ~ ("{" | (LETTER | "_"))) | "{" | "}" | "]" | "&&" | "||" | "==" | "!=" | "<=" | ">=" | " < " | " > ") ~ ANY)+
}

interpolated_literal = @{ 
    (!(("$" ~ ("{" | (LETTER | "_"))) | "{" | "}" | "]" | "&&" | "||" | "==" | "!=" | "<=" | ">=" | " < " | " > ") ~ ANY)+
}

template_content = { template_item* }
template_item = {
    template_variable |
    template_literal
}
template_literal = @{ (!(template_variable | "}" | "]") ~ ANY)+ }

template_conditional = { 
    "${" ~ field_path ~ "?" ~ template_content ~ ":" ~ template_content ~ "}" 
}

template_variable = { 
    braced_variable |
    plain_variable
}

braced_variable = { "${" ~ field_path ~ "}" }
plain_variable = { "$" ~ non_numeric_field_path }

simple_variable = @{ "$" ~ non_numeric_field_path }

// Non-numeric field path - like field_path but excludes pure numeric identifiers
non_numeric_field_path = { non_numeric_component ~ ("." ~ field_component)* }
non_numeric_component = { identifier } // Only alphabetic identifiers, no numeric_identifier
