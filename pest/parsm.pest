// parsm.pest - Complete grammar for the filtering DSL with relaxed template syntax

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }

// Main program entry point - updated to support new expression types
program = { SOI ~ expression? ~ EOI }

// Main expression types with relaxed syntax - reordered for proper precedence
expression = {
    combined_expr |     // filter + template: "age > 25 {name}"
    filter_expr |       // filters: "age > 25", "name == 'Alice'" (try filters before field selectors)
    template_expr |     // templates: "{name}", "$name", "Hello $name"  
    field_selector      // field selectors: "name", "user.email" (simple field access only, last resort)
}

// Combined filter and template expression
combined_expr = { filter_expr ~ template_expr }

// Field selector for simple field extraction (unquoted identifier or quoted string)
field_selector = { quoted_field | field_access }
quoted_field = { string_literal }

// Filter expressions with explicit whitespace handling
filter_expr = { condition }

condition = { or_expr }
or_expr = { and_expr ~ (WHITESPACE* ~ or_op ~ WHITESPACE* ~ and_expr)* }
and_expr = { comparison ~ (WHITESPACE* ~ and_op ~ WHITESPACE* ~ comparison)* }

comparison = {
    field_access ~ comparison_op ~ value |
    "(" ~ condition ~ ")" |
    not_op ~ comparison |
    not_op ~ field_access
}

// Operators
or_op = { "||" }
and_op = { "&&" }
not_op = { "!" }
comparison_op = { 
    "==" | "!=" | "<=" | ">=" | "<" | ">" | 
    "~" | "^=" | "$=" | "*="
}

// Field access (supports nested fields like user.name and array indices like items.0)
field_access = { field_component ~ ("." ~ field_component)* }
field_path = { field_component ~ ("." ~ field_component)* }
field_component = { identifier | numeric_identifier }
identifier = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
numeric_identifier = { ASCII_DIGIT+ }

// Values
value = {
    string_literal |
    number |
    boolean |
    null |
    unquoted_value
}

string_literal = { "\"" ~ string_inner ~ "\"" | "'" ~ string_inner_single ~ "'" }
string_inner = { (!("\"") ~ ANY)* }
string_inner_single = { (!("'") ~ ANY)* }

number = { "-"? ~ (float | integer) }
float = { integer ~ "." ~ ASCII_DIGIT+ }
integer = { ASCII_DIGIT+ }

boolean = { "true" | "false" }
null = { "null" }

// Unquoted value for operators like contains, startswith, etc.
unquoted_value = { (ASCII_ALPHANUMERIC | "_")+ }

// RELAXED TEMPLATES - Much more permissive
template_expr = {
    braced_template |           // {name}, {Hello $name}, {$name}, ${name}
    interpolated_text |         // Hello $name, $name is $age  
    simple_variable             // $name, $user.email (must come last to avoid conflicts)
}

// Braced template with support for bare fields - preserves whitespace  
braced_template = { "{" ~ template_content_atomic ~ "}" }
template_content_atomic = @{ template_content_chars* }
template_content_chars = _{ 
    ("${" ~ var_content ~ "}") |        // ${name} variable
    ("$" ~ simple_var_name) |           // $name variable  
    (!("}") ~ ANY)                      // any other character except closing brace
}

// Simple variable syntax: $name (but not ${name} - that's a braced template)
simple_variable = { "$" ~ simple_var_name }

// Interpolated text with variables: "Hello $name"
interpolated_text = { (literal_text ~ template_variable)+ ~ literal_text? | literal_text ~ (template_variable ~ literal_text?)+ }

// Template variables: ${name} or $name (for interpolation)
template_variable = { "${" ~ var_content ~ "}" | "$" ~ simple_var_name }
var_content = { (ASCII_ALPHANUMERIC | "_" | ".")+ }
simple_var_name = { (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_" | ".")* }

// Template text that's not a variable - must preserve spaces
literal_text = { (!("$" | "{" | "}") ~ ANY)+ }